From 2516061020573e2472b133ca05eaff9e5405ec7f Mon Sep 17 00:00:00 2001
From: Shawn Anastasio <shawn@anastas.io>
Date: Thu, 29 Aug 2019 15:12:15 -0500
Subject: [PATCH] Yarn: Add implementation for ppc64 ELFv2

---
 src/Yarn/BUILD.gn            |   3 +
 src/Yarn/OSFiber_asm.hpp     |   2 +
 src/Yarn/OSFiber_asm_ppc64.S | 196 +++++++++++++++++++++++++++++++++++
 src/Yarn/OSFiber_asm_ppc64.h | 133 ++++++++++++++++++++++++
 src/Yarn/OSFiber_ppc64.c     |  42 ++++++++
 5 files changed, 376 insertions(+)
 create mode 100644 src/Yarn/OSFiber_asm_ppc64.S
 create mode 100644 src/Yarn/OSFiber_asm_ppc64.h
 create mode 100644 src/Yarn/OSFiber_ppc64.c

diff --git a/src/Yarn/BUILD.gn b/src/Yarn/BUILD.gn
index 3236f13a4..87c116871 100644
--- a/src/Yarn/BUILD.gn
+++ b/src/Yarn/BUILD.gn
@@ -55,6 +55,9 @@ swiftshader_source_set("Yarn") {
       "OSFiber_x86.c",
       "OSFiber_asm_x86.h",
       "OSFiber_asm_x86.S",
+      "OSFiber_ppc64.c",
+      "OSFiber_asm_ppc64.h",
+      "OSFiber_asm_ppc64.S",
     ]
   }
 
diff --git a/src/Yarn/OSFiber_asm.hpp b/src/Yarn/OSFiber_asm.hpp
index e0fa508a9..7d6f96124 100644
--- a/src/Yarn/OSFiber_asm.hpp
+++ b/src/Yarn/OSFiber_asm.hpp
@@ -30,6 +30,8 @@
 #include "OSFiber_asm_aarch64.h"
 #elif defined(__arm__)
 #include "OSFiber_asm_arm.h"
+#elif defined(__powerpc64__) && (_CALL_ELF == 2)
+#include "OSFiber_asm_ppc64.h"
 #else
 #error "Unsupported target"
 #endif
diff --git a/src/Yarn/OSFiber_asm_ppc64.S b/src/Yarn/OSFiber_asm_ppc64.S
new file mode 100644
index 000000000..7d464fc12
--- /dev/null
+++ b/src/Yarn/OSFiber_asm_ppc64.S
@@ -0,0 +1,196 @@
+// Copyright 2019 The SwiftShader Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#if defined(__powerpc64__)
+
+#define YARN_BUILD_ASM 1
+#include "OSFiber_asm_ppc64.h"
+
+// void yarn_fiber_swap(yarn_fiber_context* from, const yarn_fiber_context* to)
+// r3: from
+// r4: to
+.text
+.global yarn_fiber_swap
+.align 4
+.type yarn_fiber_swap @function
+yarn_fiber_swap:
+
+    // Save context 'from'
+
+    // Store non-volatile registers
+    std 1, YARN_REG_R1(4)
+    std 2, YARN_REG_R2(4)
+    std 13, YARN_REG_R13(4)
+    std 14, YARN_REG_R14(4)
+    std 15, YARN_REG_R15(4)
+    std 16, YARN_REG_R16(4)
+    std 17, YARN_REG_R17(4)
+    std 18, YARN_REG_R18(4)
+    std 19, YARN_REG_R19(4)
+    std 20, YARN_REG_R20(4)
+    std 21, YARN_REG_R21(4)
+    std 22, YARN_REG_R22(4)
+    std 23, YARN_REG_R23(4)
+    std 24, YARN_REG_R24(4)
+    std 25, YARN_REG_R25(4)
+    std 26, YARN_REG_R26(4)
+    std 27, YARN_REG_R27(4)
+    std 28, YARN_REG_R28(4)
+    std 29, YARN_REG_R29(4)
+    std 30, YARN_REG_R30(4)
+    std 31, YARN_REG_R31(4)
+
+    // Store special registers
+    mflr 5
+    std 5, YARN_REG_LR(4)
+    mfcr 5
+    std 5, YARN_REG_CCR(4)
+
+    // Store non-volatile floating point registers
+    stfd 14, YARN_REG_FPRS+0x10(4)
+    stfd 15, YARN_REG_FPRS+0x18(4)
+    stfd 16, YARN_REG_FPRS+0x20(4)
+    stfd 17, YARN_REG_FPRS+0x28(4)
+    stfd 18, YARN_REG_FPRS+0x30(4)
+    stfd 19, YARN_REG_FPRS+0x38(4)
+    stfd 20, YARN_REG_FPRS+0x40(4)
+    stfd 21, YARN_REG_FPRS+0x48(4)
+    stfd 22, YARN_REG_FPRS+0x50(4)
+    stfd 23, YARN_REG_FPRS+0x58(4)
+    stfd 24, YARN_REG_FPRS+0x60(4)
+    stfd 25, YARN_REG_FPRS+0x68(4)
+    stfd 26, YARN_REG_FPRS+0x70(4)
+    stfd 27, YARN_REG_FPRS+0x78(4)
+    stfd 28, YARN_REG_FPRS+0x80(4)
+    stfd 29, YARN_REG_FPRS+0x88(4)
+    stfd 30, YARN_REG_FPRS+0x90(4)
+    stfd 31, YARN_REG_FPRS+0x98(4)
+
+    // Store non-volatile altivec registers
+#ifdef __ALTIVEC__
+    li 5, YARN_REG_VMX
+    stvxl 20, 4, 5
+    addi 5, 5, 16
+    stvxl 21, 4, 5
+    addi 5, 5, 16
+    stvxl 22, 4, 5
+    addi 5, 5, 16
+    stvxl 23, 4, 5
+    addi 5, 5, 16
+    stvxl 24, 4, 5
+    addi 5, 5, 16
+    stvxl 25, 4, 5
+    addi 5, 5, 16
+    stvxl 26, 4, 5
+    addi 5, 5, 16
+    stvxl 27, 4, 5
+    addi 5, 5, 16
+    stvxl 28, 4, 5
+    addi 5, 5, 16
+    stvxl 29, 4, 5
+    addi 5, 5, 16
+    stvxl 30, 4, 5
+    addi 5, 5, 16
+    stvxl 31, 4, 5
+    addi 5, 5, 16
+
+    mfvrsave 5
+    stw 5, YARN_REG_VRSAVE(4)
+#endif // __ALTIVEC__
+
+    // Load non-volatile registers
+    ld 1, YARN_REG_R1(3)
+    ld 2, YARN_REG_R2(3)
+    ld 13, YARN_REG_R13(3)
+    ld 14, YARN_REG_R14(3)
+    ld 15, YARN_REG_R15(3)
+    ld 16, YARN_REG_R16(3)
+    ld 17, YARN_REG_R17(3)
+    ld 18, YARN_REG_R18(3)
+    ld 19, YARN_REG_R19(3)
+    ld 20, YARN_REG_R20(3)
+    ld 21, YARN_REG_R21(3)
+    ld 22, YARN_REG_R22(3)
+    ld 23, YARN_REG_R23(3)
+    ld 24, YARN_REG_R24(3)
+    ld 25, YARN_REG_R25(3)
+    ld 26, YARN_REG_R26(3)
+    ld 27, YARN_REG_R27(3)
+    ld 28, YARN_REG_R28(3)
+    ld 29, YARN_REG_R29(3)
+    ld 30, YARN_REG_R30(3)
+    ld 31, YARN_REG_R31(3)
+
+    // Load non-volatile floating point registers
+    lfd 14, YARN_REG_FPRS+0x10(3)
+    lfd 15, YARN_REG_FPRS+0x18(3)
+    lfd 16, YARN_REG_FPRS+0x20(3)
+    lfd 17, YARN_REG_FPRS+0x28(3)
+    lfd 18, YARN_REG_FPRS+0x30(3)
+    lfd 19, YARN_REG_FPRS+0x38(3)
+    lfd 20, YARN_REG_FPRS+0x40(3)
+    lfd 21, YARN_REG_FPRS+0x48(3)
+    lfd 22, YARN_REG_FPRS+0x50(3)
+    lfd 23, YARN_REG_FPRS+0x58(3)
+    lfd 24, YARN_REG_FPRS+0x60(3)
+    lfd 25, YARN_REG_FPRS+0x68(3)
+    lfd 26, YARN_REG_FPRS+0x70(3)
+    lfd 27, YARN_REG_FPRS+0x78(3)
+    lfd 28, YARN_REG_FPRS+0x80(3)
+    lfd 29, YARN_REG_FPRS+0x88(3)
+    lfd 30, YARN_REG_FPRS+0x90(3)
+    lfd 31, YARN_REG_FPRS+0x98(3)
+
+    // Load non-volatile altivec registers
+#ifdef __ALTIVEC__
+    li 5, YARN_REG_VMX
+    lvxl 20, 3, 5
+    addi 5, 5, 16
+    lvxl 21, 3, 5
+    addi 5, 5, 16
+    lvxl 22, 3, 5
+    addi 5, 5, 16
+    lvxl 23, 3, 5
+    addi 5, 5, 16
+    lvxl 24, 3, 5
+    addi 5, 5, 16
+    lvxl 25, 3, 5
+    addi 5, 5, 16
+    lvxl 26, 3, 5
+    addi 5, 5, 16
+    lvxl 27, 3, 5
+    addi 5, 5, 16
+    lvxl 28, 3, 5
+    addi 5, 5, 16
+    lvxl 29, 3, 5
+    addi 5, 5, 16
+    lvxl 30, 3, 5
+    addi 5, 5, 16
+    lvxl 31, 3, 5
+    addi 5, 5, 16
+
+    lwz 5, YARN_REG_VRSAVE(3)
+    mtvrsave 5
+#endif // __ALTIVEC__
+
+    // Load parameters and entrypoint
+    ld 12, YARN_REG_LR(3)
+    ld 4, YARN_REG_R4(3)
+    ld 3, YARN_REG_R3(3)
+    mtlr 12
+
+    // Branch to entrypoint
+    blr
+
+#endif // defined(__powerpc64__)
diff --git a/src/Yarn/OSFiber_asm_ppc64.h b/src/Yarn/OSFiber_asm_ppc64.h
new file mode 100644
index 000000000..5f9b10822
--- /dev/null
+++ b/src/Yarn/OSFiber_asm_ppc64.h
@@ -0,0 +1,133 @@
+// Copyright 2019 The SwiftShader Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#define YARN_REG_R1  0x00
+#define YARN_REG_R2  0x08
+#define YARN_REG_R13 0x10
+#define YARN_REG_R14 0x18
+#define YARN_REG_R15 0x20
+#define YARN_REG_R16 0x28
+#define YARN_REG_R17 0x30
+#define YARN_REG_R18 0x38
+#define YARN_REG_R19 0x40
+#define YARN_REG_R20 0x48
+#define YARN_REG_R21 0x50
+#define YARN_REG_R22 0x58
+#define YARN_REG_R23 0x60
+#define YARN_REG_R24 0x68
+#define YARN_REG_R25 0x70
+#define YARN_REG_R26 0x78
+#define YARN_REG_R27 0x80
+#define YARN_REG_R28 0x88
+#define YARN_REG_R29 0x90
+#define YARN_REG_R30 0x98
+#define YARN_REG_R31 0xa0
+
+#define YARN_REG_R12 0xa8
+
+#define YARN_REG_R3  0xb0
+#define YARN_REG_R4  0xb8
+
+#define YARN_REG_LR  0xc0
+#define YARN_REG_CCR 0xc8
+
+#define YARN_REG_FPRS 0xd0
+#define YARN_REG_VMX  0x160
+#define YARN_REG_VRSAVE 0x220
+
+#ifndef YARN_BUILD_ASM
+
+#include <stdint.h>
+
+struct yarn_fiber_context
+{
+    // non-volatile registers
+    uintptr_t r1;
+    uintptr_t r2;
+    uintptr_t r13;
+    uintptr_t r14;
+    uintptr_t r15;
+    uintptr_t r16;
+    uintptr_t r17;
+    uintptr_t r18;
+    uintptr_t r19;
+    uintptr_t r20;
+    uintptr_t r21;
+    uintptr_t r22;
+    uintptr_t r23;
+    uintptr_t r24;
+    uintptr_t r25;
+    uintptr_t r26;
+    uintptr_t r27;
+    uintptr_t r28;
+    uintptr_t r29;
+    uintptr_t r30;
+    uintptr_t r31;
+
+    // function entrypoint register (r12)
+    uintptr_t r12;
+
+    // first two parameter registers (r3, r4)
+    uintptr_t r3;
+    uintptr_t r4;
+
+    // special registers
+    uintptr_t lr;
+    uintptr_t ccr;
+
+    // non-volatile floating-point registers (f14-f31)
+    uintptr_t fprs[18];
+
+    // non-volatile altivec registers
+    uintptr_t vmx[12 * 2];
+    uint32_t vrsave;
+};
+
+// Only the ELFv2 ABI is supported for now
+#if !defined(_CALL_ELF) || (_CALL_ELF != 2)
+#error "Only the ppc64 ELFv2 ABI is supported."
+#endif
+
+#ifdef __cplusplus
+#include <cstddef>
+static_assert(offsetof(yarn_fiber_context, r1) == YARN_REG_R1, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r2) == YARN_REG_R2, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r12) == YARN_REG_R12, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r13) == YARN_REG_R13, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r15) == YARN_REG_R15, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r16) == YARN_REG_R16, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r17) == YARN_REG_R17, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r18) == YARN_REG_R18, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r19) == YARN_REG_R19, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r20) == YARN_REG_R20, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r21) == YARN_REG_R21, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r22) == YARN_REG_R22, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r23) == YARN_REG_R23, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r24) == YARN_REG_R24, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r25) == YARN_REG_R25, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r26) == YARN_REG_R26, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r27) == YARN_REG_R27, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r28) == YARN_REG_R28, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r29) == YARN_REG_R29, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r30) == YARN_REG_R30, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r31) == YARN_REG_R31, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, r14) == YARN_REG_R14, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, lr) == YARN_REG_LR, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, ccr) == YARN_REG_CCR, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, fprs) == YARN_REG_FPRS, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, vmx) == YARN_REG_VMX, "Bad register offset");
+static_assert(offsetof(yarn_fiber_context, vrsave) == YARN_REG_VRSAVE, "Bad register offset");
+#endif // __cplusplus
+
+#endif // YARN_BUILD_ASM
diff --git a/src/Yarn/OSFiber_ppc64.c b/src/Yarn/OSFiber_ppc64.c
new file mode 100644
index 000000000..b0efeaf01
--- /dev/null
+++ b/src/Yarn/OSFiber_ppc64.c
@@ -0,0 +1,42 @@
+// Copyright 2019 The SwiftShader Authors. All Rights Reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//    http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#if defined(__powerpc64__)
+
+#include "OSFiber_asm_ppc64.h"
+
+void yarn_fiber_trampoline(void(*target)(void*), void* arg)
+{
+    target(arg);
+}
+
+void yarn_fiber_set_target(struct yarn_fiber_context* ctx, void* stack, uint32_t stack_size, void(*target)(void*), void* arg)
+{
+    uintptr_t stack_top = (uintptr_t)((uint8_t*)(stack) + stack_size);
+    if ((stack_top % 16) != 0)
+        stack_top -= (stack_top % 16);
+
+    // Write a NULL backchain and subtract a minimum stack frame size (32)
+    *(uintptr_t *)stack_top = 0;
+    stack_top -= 32;
+    *(uintptr_t *)stack_top = stack_top + 32;
+
+    // Load registers
+    ctx->r1 = stack_top;
+    ctx->lr = (uintptr_t)yarn_fiber_trampoline;
+    ctx->r3 = (uintptr_t)target;
+    ctx->r4 = (uintptr_t)arg;
+}
+
+#endif // __powerpc64__
-- 
2.23.0

